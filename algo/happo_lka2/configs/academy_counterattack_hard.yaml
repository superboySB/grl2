---
algorithm: &algo happo
name: happo
info: happo

precision: 32

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

routine:
    algorithm: *algo

    MAX_STEPS: 1e7
    n_steps: &nsteps 100
    LOG_PERIOD: 1e5
    EVAL_PERIOD: null

    n_eval_envs: 100
    RECORD_VIDEO: True
    N_EVAL_EPISODES: 1
    size: [256, 256]

    n_lka_steps: 1
    n_simulated_envs: &nse 64
    n_simulated_steps: &nss 100
    model_rollout_type: sim
    compute_return_at_once: True
    ignore_ratio_for_ego: False
    ignore_ratio_for_lookahead: False
    perm: null
    restore_state: False
    switch_model_at_every_step: False
    quantify_dynamics_errors: False
    rollout_type: part
    concise_mode: True

env:
    env_name: &env_name grf-academy_counterattack_hard
    representation: simple115v2
    rewards: scoring,checkpoints
    render: False
    write_full_episode_dumps: False
    write_video: False
    dump_frequency: 1000
    logdir: results/grf
    extra_players: null
    number_of_left_players_agent_controls: 3
    number_of_right_players_agent_controls: 0
    add_role_to_obs: False
    shared_ckpt_reward: False

    max_episode_steps: 200
    use_action_mask: False
    uid2aid: null
    share_policy: False

    n_runners: &nrunners 8
    n_envs: &nenvs 8

    use_idx: False
    use_hidden: False
    use_event: False
    agentwise_global_state: False
    timeout_done: &td False

agent: {}

monitor:
    use_tensorboard: True

strategy:
    algorithm: *algo
    train_loop: {}

model:
    aid: 0
    gamma: &gamma .99

    policy:
        nn_id: policy
        units_list: [64, 64]
        w_init: orthogonal
        activation: relu
        norm: null
        out_scale: .01
        rnn_type: &prnn null
        rnn_units: 64
    value:
        nn_id: value
        units_list: [64, 64]
        w_init: orthogonal
        activation: relu
        norm: null
        rnn_type: &vrnn null
        rnn_units: 64

loss:
    # hyperparams for value target and advantage
    target_type: gae
    c_clip: 1
    rho_clip: 1
    adv_type: gae
    norm_adv: False

    prnn_bptt: 10
    vrnn_bptt: 10

    # hyperparams for policy optimization
    pg_type: ppo
    opt_pg: False
    ppo_clip_range: .2
    rescaled_by_adv: False
    lower_threshold: -2
    reg_type: kl_reverse
    reg_coef: 0
    pos_reg_coef: 0
    neg_reg_coef: 0
    policy_sample_mask: True

    # hyperparams for value learning
    value_loss: clip
    value_clip_range: .2
    value_sample_mask: False

    # hyperparams for lka
    lka_prnn_bptt: 10
    lka_vrnn_bptt: 10
    pos_lka_reg_coef: 0

    stats:
        gamma: *gamma
        lam: &lam .95
        pg_coef: 1
        entropy_coef: 5e-3
        value_coef: 1

trainer:
    algorithm: *algo
    aid: 0
    n_runners: *nrunners
    n_envs: *nenvs
    n_epochs: &nepochs 15
    n_mbs: &nmbs 1
    n_steps: *nsteps
    update_scheme: step

    n_simulated_envs: *nse
    n_simulated_steps: *nss
    n_lka_epochs: *nepochs
    n_lka_mbs: *nmbs
    debug: False

    theta_opt:
        opt_name: adam
        lr: 5e-4
        clip_norm: 10
        eps: 1e-5

actor:
    update_obs_rms_at_execution: False
    update_obs_at_execution: False
    obs_rms:
        obs_names: [obs, global_state]
        obs_normalized_axis: [0, 1]    # obs is normalized at once with the sequential dimension
        obs_normalized_ndim: 2
        normalize_obs: True
        obs_clip: 10
    reward_rms:
        reward_normalized_axis: [0, 1] # reward is normalized at once with the sequential dimension
        reward_normalized_ndim: 1
        normalize_reward: True
        update_reward_rms_in_time: False
        gamma: *gamma

buffer:
    type: ac

    n_runners: *nrunners
    n_envs: *nenvs
    n_steps: *nsteps
    queue_size: 2
    timeout_done: *td

    gamma: *gamma
    lam: *lam

    sample_keys: 
        - obs
        - global_state
        - action
        - value
        - reward
        - discount
        - reset
        - mu_logprob
        - mu_logits
        - state_reset
        - state
