---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo gd

precision: 32

training: &training bc

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be reset in our training process
root_dir: *algo
model_name: *algo

env:
    name: &env_name gd
    eid: 0
    n_workers: 1
    n_envs: &nenvs 64
    frame_skip: 1
    frame_stack: 1
    # num_levels: 200
    distribution_mode: easy

agent:
    algorithm: *algo

    MAX_STEPS: 1e10
    N_STEPS: &nsteps 256
    LOG_PERIOD: 200
    EVAL_PERIOD: 200

    RECORD_VIDEO: True
    N_EVAL_EPISODES: 1

strategy:
    train_loop:
        training: *training
        N_EPOCHS: &nepochs 4
        N_VALUE_EPOCHS: &nval_epochs 0
        N_MBS: &nmbs 4
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once, reuse, null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train, which is staler than once
        # null doesn't update values.
        value_update: null

    RECORD_VIDEO: True

model:
    rnn_type: &rnn rnn_mlstm

    action_encoder:
        nn_id: encoder
        numbers: &numbers
            layer_type: glu
            units_list: [16, 32, 32]
            kernel_size: 3
            strides: 2
            padding: same
            activation: relu
            # norm: null
            # norm_after_activation: True
            # norm_kwargs:
            #     epsilon: 1.e-5
        jokers: &jokers
            layer_type: dense
            units_list: [32, 32]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        others: 
            layer_type: dense
            units_list: [32, 32]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    action_rnn:
        nn_id: *rnn
        units: 128
        return_sequences: False
        kernel_initializer: orthogonal
        use_ln: False

    obs_encoder:
        nn_id: encoder
        numbers: *numbers
        jokers: *jokers
        others:
            layer_type: dense
            units_list: [128, 128]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    rnn:
        nn_id: *rnn
        units: 128
        kernel_initializer: orthogonal
        use_ln: False

    action_type:
        nn_id: policy
        eval_act_temp: 1
        head:
            units_list: [128]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        aux: 
            units_list: [64]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    card_rank:
        nn_id: policy
        eval_act_temp: 1
        head:
            units_list: [128]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        aux: 
            units_list: [64]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5

    others_encoder:
        nn_id: encoder
        numbers: *numbers
        jokers: *jokers

    value:
        nn_id: value
        units_list: []
        norm: null
        kernel_initializer: orthogonal
        activation: relu

loss:
    training: *training
    # arguments for loss
    value_loss: clip
    clip_range: .2          # clip range for ppo
    entropy_coef: .01
    action_type_coef: 1
    card_rank_coef: 1
    value_coef: .5

trainer:
    training: *training
    # BC configs
    batch_size: &bs 100
    sample_size: &ss 40

    optimizer:
        opt_name: adam
        schedule_lr: False
        lr: 5e-4
        # clip_norm: .5
        epsilon: 1.e-5

actor:
    rms:
        normalize_obs: False
        normalize_reward: True
        gamma: &gamma .999

buffer:
    training: *training
    dir: data/gd-100000
    # PPO configs
    use_dataset: True

    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_envs: *nenvs
    batch_size: *bs
    N_EPOCHS: *nepochs
    N_VALUE_EPOCHS: *nval_epochs
    N_MBS: *nmbs        # number of minibatches
    sample_size: *ss
    norm_adv: batch
    # mini-batch size = n_workers * n_envs * epslen / n_mbs
    sample_keys: [obs, global_state, action, value, traj_ret, advantage, logpi, mask, action_mask, life_mask, actor_h, actor_c, value_h, value_c]
