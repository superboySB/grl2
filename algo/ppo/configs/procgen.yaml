---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo ppo
name: ppo

precision: 16

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

routine:
    algorithm: *algo

    MAX_STEPS: 2.5e7
    n_steps: &nsteps 256
    LOG_PERIOD: 200
    EVAL_PERIOD: 200

    RECORD_VIDEO: False
    N_EVAL_EPISODES: 1

    timeout_done: &td False

env:
    env_name: &env_name procgen-coinrun
    n_runners: &nrunners 1
    n_envs: &nenvs 64
    frame_skip: 1
    frame_stack: 1
    # num_levels: 200
    distribution_mode: easy

agent: {}

strategy:
    train_loop:
        n_epochs: &nepochs 3
        N_VALUE_EPOCHS: &nval_epochs 0
        n_mbs: &nmbs 8
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once, reuse, null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train, which is staler than once
        # null doesn't update values.
        value_update: null

    RECORD_VIDEO: False

model:
    rnn_type: &rnn null
    sample_size: &ss 16
    encoder: 
        nn_id: cnn_impala
        block: resv2
        out_size: 256
    rnn:
        nn_id: *rnn
        units: 256
        kernel_initializer: orthogonal
        recurrent_initializer: orthogonal
        use_ln: True
    policy:
        nn_id: policy
        units_list: []
        norm: null
        kernel_initializer: orthogonal
        activation: relu
        out_gain: .01
        eval_act_temp: 1
    value:
        nn_id: value
        units_list: []
        norm: null
        kernel_initializer: orthogonal
        activation: relu

loss:
    # arguments for loss
    value_loss: clip
    ppo_clip_range: .2          # clip range for ppo
    value_clip_range: .2          # clip range for ppo
    entropy_coef: .01
    value_coef: .5
    aux_l1_coef: 0
    aux_l2_coef: 0
    weighted_l_dist: False
    kl_prior_coef: 0
    kl_target_coef: 0
    new_po_coef: 0
    pg_coef: 1
    target_prob: target_prob_prime
    js_target_coef: 0
    js_target: approx
    kl_prior: reverse
    kl_target: reverse_approx

    normalize_adv: False
    process_adv: null
    zero_center: True
    adv_normalizer: 5
    adv_scale: 10

trainer:
    algorithm: *algo
    sample_size: *ss         # BPTT length
    
    optimizer:
        opt_name: adam
        schedule_lr: False
        lr: 5e-4
        clip_norm: .5
        epsilon: 1.e-5

actor:
    rms:
        normalize_obs: False
        normalize_reward: True
        update_reward_rms_in_time: False
        gamma: &gamma .999

buffer:
    use_dataset: False
    type: ppo

    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_runners: *nrunners
    n_envs: *nenvs
    n_steps: *nsteps
    n_epochs: *nepochs
    N_VALUE_EPOCHS: *nval_epochs
    n_mbs: *nmbs        # number of minibatches
    rnn_type: *rnn
    normalize_adv_in_buffer: False
    zero_center_adv_in_buffer: True
    process_adv_in_buffer: null
    adv_clip_in_buffer: null

    # Trust region arguments
    target_pi:
        target_type: exp
        adv_tau: 1
        alpha: .2
        pr_lower_clip: .2
        pr_upper_clip: .2
        exp_lower_clip: 1
        exp_upper_clip: 1
        adv_lower_clip: 1
        adv_upper_clip: 3
        lin_lower_clip: .5
        lin_upper_clip: 1
        lin_weights: 1
        normalize_adv_for_step: False
        zero_center_for_step: True
        process_adv_for_step: null
        step_size: .1

        target_prob_key: target_prob_prime

    aux_adv_lower_clip: null
    aux_adv_upper_clip: null

    sample_keys: 
        - obs
        - reward
        - action
        - value
        - traj_ret
        - advantage
        - target_prob
        - tr_prob
        - vt_prob
        - target_prob_prime
        - tr_prob_prime
        - logprob
        - pi
        - target_pi
        - mask
        - h
        - c
    # mini-batch size = n_runners * n_envs * epslen / n_mbs
