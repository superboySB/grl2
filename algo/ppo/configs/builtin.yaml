---
algorithm: &algo ppo
name: zero

precision: 32

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

routine:
    algorithm: *algo

    MAX_STEPS: 1e10
    n_steps: &nsteps 64
    LOG_PERIOD: 100
    EVAL_PERIOD: 100

    RECORD_VIDEO: False
    N_EVAL_EPISODES: 1

env:
    env_name: &env_name BipedalWalker-v3
    n_runners: 1
    n_envs: &nenvs 64
    seed: 0
    reward_min: -1
    reward_max: null

agent: {}

strategy:
    train_loop:
        n_epochs: &nepochs 4
        N_VALUE_EPOCHS: &nval_epochs 0
        n_mbs: &nmbs 4
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once, reuse, null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train, which is staler than once
        # null doesn't update values.
        value_update: null

model:
    encoder: 
        nn_id: null
        units_list: []
        activation: relu
    policy:
        nn_id: policy
        units_list: [64, 64]
        init_std: 1
        norm: null
        kernel_initializer: orthogonal
        activation: tanh
    value:
        nn_id: value
        units_list: [64, 64]
        norm: null
        kernel_initializer: orthogonal
        activation: tanh

loss:
    # arguments for loss
    value_loss: clip
    clip_range: .2          # clip range for ppo
    entropy_coef: 1e-3
    value_coef: 1

trainer:
    optimizer:
        opt_name: adam
        schedule_lr: False
        lr: 3e-4
        clip_norm: .5
        epsilon: 1.e-5

actor:
    rms:
        normalize_obs: True
        normalize_reward: True
        gamma: &gamma .99

buffer:
    use_dataset: True

    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_envs: *nenvs
    n_steps: *nsteps
    n_epochs: *nepochs
    N_VALUE_EPOCHS: *nval_epochs
    n_mbs: *nmbs        # number of minibatches
    norm_adv: minibatch
    sample_keys: [obs, action, value, traj_ret, advantage, logpi]
    # mini-batch size = n_runners * n_envs * epslen / n_mbs
