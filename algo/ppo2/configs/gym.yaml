---
algorithm: &algo ppo
name: ppo

precision: 32

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

routine:
    algorithm: *algo

    MAX_STEPS: 1e10
    n_steps: &nsteps 128
    LOG_PERIOD: 500
    EVAL_PERIOD: 500

    RECORD_VIDEO: False
    N_EVAL_EPISODES: 1

env:
    env_name: &env_name BipedalWalkerHardcore-v3
    n_runners: &nrunners 1
    n_envs: &nenvs 64
    seed: 0
    reward_min: -1
    reward_max: null
    timeout_done: True

agent: {}

strategy:
    train_loop:
        use_dataset: &dataset False
        n_epochs: &nepochs 4
        n_mbs: &nmbs 4
        n_aux_epochs: &naepochs 9
        n_pi: &npi 16
        n_segs: &nsegs 16
        n_aux_mbs_per_seg: &nambs 2
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once reuse null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train which is staler than once
        # null doesn't update values.
        value_update: null

model:
    actor_rnn_type: &arnn null
    value_rnn_type: &vrnn null
    sample_size: &ss 16

    policy:
        use_prev_reward: True
        use_prev_action: True
        encoder: 
            nn_id: mlp
            units_list: [256, 256]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *arnn
            units: 64
            kernel_initializer: orthogonal
            recurrent_initializer: orthogonal
            use_ln: True
        policy:
            nn_id: policy
            units_list: []
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            eval_act_temp: 1
            out_gain: .01
            init_std: 1

    value:
        use_prev_reward: True
        use_prev_action: True
        encoder:
            nn_id: mlp
            units_list: [256, 256]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *vrnn
            units: 64
            kernel_initializer: orthogonal
            recurrent_initializer: orthogonal
            use_ln: True
        value:
            nn_id: value
            units_list: []
            kernel_initializer: orthogonal
            activation: relu
            norm: null

loss:
    policy:
        clip_range: .2
        entropy_coef: 5e-4
        gpo_coef: 0
        policy_life_mask: False
    value:
        value_loss: clip
        clip_range: .2
        value_coef: 1
        value_life_mask: False

trainer:
    algorithm: *algo

    actor_rnn_type: *arnn
    value_rnn_type: *vrnn
    sample_size: *ss         # BPTT length
    store_state: True

    policy:
        optimizer:
            opt_name: adam
            schedule_lr: False
            lr: 3e-4
            clip_norm: .5
            epsilon: 1.e-5
            weight_decay: 0
    value:
        optimizer:
            opt_name: adam
            schedule_lr: False
            lr: 3e-4
            clip_norm: .5
            epsilon: 1.e-5

actor:
    rms:
        obs_names: [obs]
        normalize_obs: True
        normalize_reward: True
        update_reward_rms_in_time: False
        gamma: &gamma .99

buffer:
    type: ppo
    use_dataset: *dataset

    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_runners: *nrunners
    n_envs: *nenvs
    n_steps: *nsteps
    n_epochs: *nepochs
    n_mbs: *nmbs        # number of minibatches
    actor_rnn_type: *arnn
    value_rnn_type: *vrnn
    norm_adv: minibatch

    # Trust region arguments
    target_type: bounded
    tau: 1
    alpha: .2
    lower_clip: 3
    upper_clip: 3

    sample_keys: 
        - obs
        - action
        - reward
        - value
        - traj_ret
        - raw_adv
        - advantage
        - target_prob
        - tr_prob
        - logprob
        - pi_mean
        - pi_std
        # - mask
        # - actor_h
        # - actor_c
        # - value_h
        # - value_c
