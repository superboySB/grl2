#!/bin/bash

export PYTHONPATH=.

algos=(
    happo
    happo
    happo
    happo
    happo_oc
    happo_oc
    happo_oc
    happo
    happo
    happo
    # happo_oc2
    # happo_oc2
    # happo_oc2
)
suite=$1
shift
# envs=(escalation staghunt harvest)
# envs=(escalation)
envs=(
    "HalfCheetah_2x3 Walker2d_2x3 Ant_2x4"
    "HalfCheetah_3x2 Walker2d_3x2 Ant_4x2"
    "HalfCheetah_6x1 Walker2d_6x1 Ant_8x1"
    # HalfCheetah_2x3
    # Ant_2x4
    # Walker2d_2x3
    # HalfCheetah_3x2
    # Walker2d_3x2
    # Ant_4x2
    # HalfCheetah_6x1
    # Walker2d_6x1
    # Ant_8x1
)
echo $envs
# e=${suite}
configs=(
    "${suite}"
)
# configs=$envs
na=2
args1=(5 3 1 0 1 3 5 1 3 5)
args2=(
    False
    False
    False
    False
    False
    False
    False
    True
    True
    True
    # .9,.09,.009,.0009,.00009,.00001 
    # .00001,.9,.09,.009,.0009,.00009 
    # .00009,.00001,.9,.09,.009,.0009 
    # .0009,.00009,.00001,.9,.09,.009 
    # .009,.0009,.00009,.00001,.9,.09 
    # .09,.009,.0009,.00009,.00001,.9 
    # .005,.045,.45,.005,.045,.45 
    # .166,.167,.167,.166,.167,.167
    # .45,.045,.005,.45,.045,.005 
    # .9,.09,.01
    # .01,.9,.09
    # .09,.01,.9
    # .33,.33,.34
    # .9,.1
    # .1,.9
    # .5,.5
    # .9,.1
    # .1,.9
    # .5,.5
)
args3=(10)
date=$(date +"%m%d")
date=0201
info=""
ld="${suite}-logs"
# gpus=$(nvidia-smi -L | wc -l)
# for x in $(seq 1 1); do
#     shift
# done

if [ -z "$info" ]; then
    n=$date
else
    n="$date-$info"
fi

le=${#envs[@]}
idx=$(($INF_MAC_NODE_RANK % $le))
e=${envs[$idx]}
env="${suite}-${e}"
lc=${#configs[@]}
idx=$(($INF_MAC_NODE_RANK % $lc))
config=${configs[$idx]}
la=${#algos[@]}
idx=$(($INF_MAC_NODE_RANK % $la))
a=${algos[$idx]}
la1=${#args1[@]}
idx=$(($INF_MAC_NODE_RANK % $la1))
a1=${args1[$idx]}
la2=${#args2[@]}
idx=$(($INF_MAC_NODE_RANK % $la2))
a2=${args2[$idx]}
la3=${#args3[@]}
idx=$(($INF_MAC_NODE_RANK % $la3))
a3=${args3[$idx]}
# kws=$@

kws="n_lookahead_steps=$a1 ignore_ratio_for_pi=$a2"
for es in "${envs[@]}"; do
    for e in $es; do
        env="${suite}-${e}"
        for s in {0..3}; do
            py_script="python run/train.py -a ${a} -e $env -c $config -ld $ld -n $n -s $s -na $na -kw $kws &"
            echo $py_script
            eval $py_script
        done
    done
    wait
done
# nn="${n}_so"
# for s in {0..5}; do
#     py_script="python run/train.py -a ${a} -e $env -c ${config}_so -ld $ld -n $nn -s $s -na $na -kw $kws &"
#     echo $py_script
#     eval $py_script
# done
# done
# for config in "${configs[@]}"; do
#     for s in {0..5}; do
#         # echo $kws
#         if [[ "$OSTYPE" == 'linux-gnu'* ]]; then
#             gpus=$(nvidia-smi -L | wc -l)
#             gpu=$(($i % $gpus))
#             py_script="python run/train.py -a ${a} -e $env -c $config -ld $ld -n $n -s $s --gpu $gpu -na $na -kw $kws &"
#         else
#             py_script="python run/train.py -a ${a} -e $env -c $config -ld $ld -n $n -s $s -na $na -kw $kws &"
#         fi
#         echo $py_script
#         eval $py_script
#         ((i=(i+1) ))
#     done
# done
wait
echo "Script completed"
# for e in "${envs[@]}"; do
# le=${#envs[@]}
# idx=$(($INF_MAC_NODE_RANK % $le))
# e=${envs[$idx]}
# lc=${#configs[@]}
# idx=$(($INF_MAC_NODE_RANK % $lc))
# config=${configs[$idx]}
# la1=${#args1[@]}
# idx=$(($INF_MAC_NODE_RANK % $la1))
# a1=${args1[$idx]}
# la2=${#args2[@]}
# idx=$(($INF_MAC_NODE_RANK % $la2))
# a2=${args2[$idx]}
# la3=${#args3[@]}
# idx=$(($INF_MAC_NODE_RANK % $la3))
# a3=${args3[$idx]}
# if [[ "${suite}" == "mpe" ]]; then
#     na=3
# else
#     na=2
# fi
# for a in "${algos[@]}"; do
#     for s in {0..9}; do
#         kws="n_lookahead_steps=$a1"
#         # echo $kws
#         env="${suite}-${e}"
#         if [[ "$OSTYPE" == 'linux-gnu'* ]]; then
#             gpu=$(($i % $gpus))
#             py_script="python run/train.py -a ${a} -e $env -c $config -ld $ld -n $n -s $s --gpu $gpu -na $na -kw $kws &"
#         else
#             py_script="python run/train.py -a ${a} -e $env -c $config -ld $ld -n $n -s $s -na $na -kw $kws &"
#         fi
#         echo $py_script
#         eval $py_script
#         ((i=(i+1) ))
#     done
#     # wait
# done
# wait
# echo "Script completed"