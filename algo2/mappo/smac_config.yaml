---
env:
    name: &env_name smac_3m
    n_workers: 8
    n_envs: &nenvs 1
    use_state_agent: True
    use_mustalive: True
    add_center_xy: True
    timeout_done: True
    add_agent_id: True

model:
    actor_encoder: 
        units_list: [64, 64, 64]
        activation: relu
        norm: layer
        norm_after_activation: True
        norm_kwargs:
            epsilon: 1.e-5
    actor_rnn:
        rnn_name: gru
        units: 64
        kernel_initializer: orthogonal
        use_ln: True
    actor:
        units_list: []
        kernel_initializer: orthogonal
        eval_act_temp: 1
    value_encoder:
        units_list: [64, 64, 64]
        activation: relu
        norm: layer
        norm_after_activation: True
        norm_kwargs:
            epsilon: 1.e-5
    value_rnn:
        rnn_name: gru
        units: 64
        kernel_initializer: orthogonal
        use_ln: True
    value:
        units_list: []
        kernel_initializer: orthogonal

agent:
    algorithm: &algo mappo
    precision: 32
    gamma: &gamma .99

    MAX_STEPS: 4e6
    N_STEPS: &nsteps 400
    N_EPOCHS: 5
    N_MBS: &nmbs 1
    sample_size: &ss 10       # BPTT length
    LOG_PERIOD: 20
    EVAL_PERIOD: 2000
    max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

    policy_life_mask: True
    value_life_mask: True

    obs_names: [obs, shared_state]
    normalize_obs: True
    normalize_reward: True
    store_state: True
    # (once, reuse, null)
    # "once" updates values at the end of each epoch
    # "reuse" updates values using value from learn, which is staler than once
    # null doesn't update values.
    value_update: null

    # model path: root_dir/model_name/models
    # tensorboard path: root_dir/model_name/logs
    # the following names are just examples; they will be reset in our training process
    root_dir: *algo                         # root path for tensorboard logs
    model_name: *algo
    RECORD: False
    
    # arguments for optimizer
    optimizer: adam
    schedule_lr: False
    lr: 5e-4
    clip_norm: 10
    opt_eps: 1e-5
    weight_decay: 0
    # arguments for loss
    value_loss: clip
    clip_range: .2          # clip range for ppo
    entropy_coef: .01
    value_coef: 1

buffer:
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_envs: *nenvs
    N_STEPS: *nsteps
    N_MBS: *nmbs        # number of minibatches
    sample_keys: [obs, shared_state, action_mask, action, value, traj_ret, advantage, logpi, actor_h, value_h, life_mask, mask]
    sample_size: *ss
    norm_adv: True
    # mini-batch size = n_workers * n_envs * epslen / n_mbs
