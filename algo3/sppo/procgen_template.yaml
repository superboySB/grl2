---
env:
    name: &env_name procgen_coinrun
    n_workers: 1
    n_envs: &nenvs 64
    frame_skip: 1
    frame_stack: 1
    np_obs: True
    gray_scale: False

model:
    encoder: 
        cnn_name: impala
        obs_range: [0, 1]
        filters: [32, 64, 64, 64]
        n_blocks: [1, 1, 1, 1]
        kernel_initializer: glorot_uniform
        stem: SUB
        subsample: SUB
        block: resv1
        block_kwargs:
            conv: conv2d
            filter_coefs: []
            kernel_sizes: [3, 3]
            norm: null
            norm_kwargs: {}
            activation: relu
            am: AM
            am_kwargs:
                excitation_type: ET
            dropout_rate: 0
            rezero: False
        sa: conv_sa
        sa_pos: []
        sa_kwargs:
            key_ratio: 1
            val_ratio: 1
            downsample_ratio: 1
        deter_stoch: False
        belief: False
        out_activation: null
        out_size: 256
    # encoder: 
    #     cnn_name: impala
    #     filters: [16, 32, 32]
    #     out_size: 256
    actor:
        units_list: []
        layer_type: dense
        norm: null
        kernel_initializer: glorot_uniform
        activation: relu
    value:
        units_list: []
        layer_type: dense
        norm: null
        kernel_initializer: glorot_uniform
        activation: relu

agent:
    algorithm: &algo ppo
    precision: 32
    gamma: &gamma .99

    MAX_STEPS: 1e7
    N_STEPS: &nsteps 256
    N_EPOCHS: 3
    N_MBS: &nmbs 8
    LOG_PERIOD: 100
    EVAL_PERIOD: 5000
    max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound
    

    normalize_obs: False
    normalize_reward: True
    # (once, reuse, null)
    # "once" updates values at the end of each epoch
    # "reuse" updates values using value from learn, which is staler than once
    # null doesn't update values.
    value_update: null

    # model path: root_dir/model_name/models
    # tensorboard path: root_dir/model_name/logs
    # the following names are just examples; they will be reset in our training process
    root_dir: *algo                         # root path for tensorboard logs
    model_name: *algo
    RECORD: True
    
    # arguments for optimizer
    optimizer: adam
    schedule_lr: False
    lr: 5e-4
    clip_norm: 0.5
    opt_kwargs:
        epsilon: 1.e-7
    # arguments for loss
    clip_range: .2          # clip range for ppo
    entropy_coef: .01
    value_coef: 1.

buffer:
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_envs: *nenvs
    N_STEPS: *nsteps
    N_MBS: *nmbs        # number of minibatches
    # mini-batch size = n_workers * n_envs * epslen / n_mbs
