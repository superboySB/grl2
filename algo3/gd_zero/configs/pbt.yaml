---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo gd_zero
name: gd_zero
version: 0

precision: 32

training: &training pbt

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

parameter_server:
    fsp: False
    p: 3    # the exponent applied to convert scores to weights
    default_score: 0
    root_dir: *algo
    model_name: *algo
    UPDATE_PERIOD: 5e4
    start_checkpoint: 
    - logs/card_gd/gd_zero
    - online_frac=0-fsp=True-oracle_value=False/v0

runner:
    ray:
        num_cpus: 1
        # num_gpus: .03

    MAX_STEPS: 5e8
    n_steps: &nsteps 128
    agent_pids: &pids [0, 2]
    initialize_other: False
    online_frac: .2
    record_self_play_stats: False

env:
    env_name: &env_name card_gd
    eid: 0
    n_runners: &nrunners 80
    n_envs: &nenvs 2
    skip_players: []

agent:
    algorithm: *algo

    LOG_PERIOD: 100

strategy:
    train_loop:
        training: *training
        n_epochs: &nepochs 1
        N_VALUE_EPOCHS: &nval_epochs 0
        n_mbs: &nmbs 2
        n_aux_epochs: &naepochs 9
        n_pi: &npi 16
        n_segs: &nsegs 16
        n_aux_mbs_per_seg: &nambs 2
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once reuse null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train which is staler than once
        # null doesn't update values.
        value_update: null

model:
    training: *training
    rnn_type: &rnn rnn_mlstm
    action_rnn_resets_every_round: False
    oracle_value: True
    sample_size: &ss 16

    action_encoder:
        nn_id: encoder
        numbers: &numbers
            layer_type: glu
            units_list: [16, 32, 32]
            kernel_size: 3
            strides: 2
            padding: same
            activation: relu
            # norm: null
            # norm_after_activation: True
            # norm_kwargs:
            #     epsilon: 1.e-5
        jokers: &jokers
            layer_type: dense
            units_list: [32, 32]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        others: 
            layer_type: dense
            units_list: [32, 32]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    action_rnn:
        nn_id: *rnn
        units: 128
        return_sequences: False
        kernel_initializer: orthogonal
        use_ln: False

    obs_encoder:
        nn_id: encoder
        numbers: *numbers
        jokers: *jokers
        others:
            layer_type: dense
            units_list: [128, 128]
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    rnn:
        nn_id: *rnn
        units: 128
        kernel_initializer: orthogonal
        use_ln: False

    action_type:
        nn_id: policy
        eval_act_temp: 1
        head:
            units_list: [128]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        aux: 
            units_list: [64]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
    card_rank:
        nn_id: policy
        eval_act_temp: 1
        head:
            units_list: [128]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        aux: 
            units_list: [64]
            kernel_initializer: orthogonal
            activation: relu
            norm: null
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5

    others_encoder:
        nn_id: encoder
        numbers: *numbers
        jokers: *jokers
    others_memory_encoder:
        nn_id: mencoder
        layer_type: dense
        units_list: []
        out_size: 128
        activation: relu
        norm: null
        norm_after_activation: True
        norm_kwargs:
            epsilon: 1.e-5

    value:
        nn_id: value
        units_list: []
        norm: null
        kernel_initializer: orthogonal
        activation: relu

loss:
    training: *training
    # hyperparams for loss
    value_loss: clip
    value_clip_range: .2          # clip range for ppo
    entropy_coef: .01
    action_type_coef: 1
    card_rank_coef: 1
    value_coef: .5
    bc_coef: 1

trainer:
    training: *training
    # # BC configs
    # batch_size: &bs 4096
    sample_size: *ss

    optimizer:
        opt_name: adam
        schedule_lr: False
        lr: 5e-4
        clip_norm: .5
        epsilon: 1.e-5

actor:
    algorithm: *algo

    rms:
        obs_names: []
        normalize_obs: False    # not implemented
        normalize_reward: False # not implemented
        gamma: &gamma .99

buffer:
    type: *training
    agent_pids: *pids
    # dir: data/gd-100000
    use_dataset: False
    
    mixed_data: False

    n_pi: *npi
    n_segs: *nsegs
    n_aux_mbs_per_seg: *nambs
    n_aux_epochs: *naepochs

    # PPO configs
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_runners: *nrunners
    n_envs: *nenvs
    # batch_size: *bs
    n_steps: *nsteps
    n_epochs: *nepochs
    N_VALUE_EPOCHS: *nval_epochs
    n_mbs: *nmbs        # number of minibatches
    sample_size: *ss
    norm_adv: minibatch
    # mini-batch size = n_runners * n_envs * epslen / n_mbs
    sample_keys:
        - numbers
        - jokers
        - left_cards
        - is_last_teammate_move
        - is_first_move
        - last_valid_action_type
        - rank
        - bombs_dealt
        - last_action_numbers
        - last_action_jokers
        - last_action_types
        - last_action_rel_pids
        - last_action_filters
        - last_action_first_move
        - action_type_mask
        - card_rank_mask
        - mask
        - others_numbers
        - others_jokers
        - others_h
        - action_type
        - card_rank
        - value 
        - traj_ret 
        - advantage 
        - action_type_logpi 
        - card_rank_logpi
        - action_h 
        - action_c
        - h
        - c
    aux_compute_keys:
        - numbers
        - jokers
        - left_cards
        - is_last_teammate_move
        - is_first_move
        - last_valid_action_type
        - rank
        - bombs_dealt
        - last_action_numbers
        - last_action_jokers
        - last_action_types
        - last_action_rel_pids
        - last_action_filters
        - last_action_first_move
        - action_type_mask
        - card_rank_mask
        - mask
        - others_numbers
        - others_jokers
        - others_h
        - action_type
        - action_h 
        - action_c
        - h
        - c
    aux_sample_keys:
        - numbers
        - jokers
        - left_cards
        - is_last_teammate_move
        - is_first_move
        - last_valid_action_type
        - rank
        - bombs_dealt
        - last_action_numbers
        - last_action_jokers
        - last_action_types
        - last_action_rel_pids
        - last_action_filters
        - last_action_first_move
        - action_type_mask
        - card_rank_mask
        - mask
        - others_numbers
        - others_jokers
        - others_h
        - action_type
        - value
        - traj_ret 
        - action_type_logits
        - card_rank_logits
        - action_h
        - action_c
        - h
        - c
