---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo hm
name: hm
version: 0

precision: 32

n_agents: 2

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
    store_period: 300
    restart_runners_priod: 3600
    max_version_iterations: 1
    max_steps_per_iteration: 3e8
    initialize_rms: &irms True

parameter_server:
    root_dir: *algo
    model_name: *algo

    train_from_scratch_frac: 1
    online_frac: 1

    payoff:
        step_size: .1
        sampling_strategy: fsp

ray_config:
    runner:
        num_cpus: 1
        max_restarts: -1
        max_task_retries: -1

    agent:
        num_gpus: 1

monitor: {}

runner:
    n_runners: &nrunners 56
    n_steps: &nsteps 256
    record_self_play_stats: False
    push_every_episode: False

env:
    env_name: &env_name unity-combat2d
    max_episode_steps: 1000
    frame_skip: 10
    unity_config:
        worker_id: 100
        file_name: env/unity_env/data/1copy/combat.x86_64
    reward_config:
        detect_reward: 0
        main_dead_reward: 0
        blue_dead_reward: 1
        grid_reward: 0
    n_envs: &nenvs 1    # This should be consistent with the Unity environemnt copies
    uid2aid: [0, 1, 1, 1, 1]

agent: {}

strategy:
    train_loop:
        n_epochs: &nepochs 5
        n_mbs: &nmbs 1
        n_aux_epochs: &naepochs 9
        n_pi: &npi 16
        n_segs: &nsegs 16
        n_aux_mbs_per_seg: &nambs 2
        max_kl: 0            # early stop when max_kl is violated. 0 or null suggests unbound

        # (once reuse null)
        # "once" updates values at the end of each epoch
        # "reuse" updates values using value from train which is staler than once
        # null doesn't update values.
        value_update: null

model:
    rnn_type: &rnn null
    sample_size: &ss 16

    policy:
        use_prev_reward: True
        use_prev_action: False
        encoder: 
            nn_id: mlp
            units_list: [64, 64, 64]
            kernel_initializer: orthogonal
            activation: relu
            norm: layer
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *rnn
            units: 64
            kernel_initializer: orthogonal
            use_ln: True
        policy:
            nn_id: policy
            units_list: []
            kernel_initializer: orthogonal
            eval_act_temp: 1
            out_gain: .01
            init_std: 1

    value:
        use_prev_reward: True
        use_prev_action: False
        encoder:
            nn_id: mlp
            units_list: [64, 64, 64]
            kernel_initializer: orthogonal
            activation: relu
            norm: layer
            norm_after_activation: True
            norm_kwargs:
                epsilon: 1.e-5
        rnn:
            nn_id: *rnn
            units: 64
            kernel_initializer: orthogonal
            use_ln: True
        value:
            nn_id: value
            units_list: []
            kernel_initializer: orthogonal
            activation: relu

loss:
    policy:
        clip_range: .2
        entropy_coef: 1e-5
        life_mask: True
    value:
        value_loss: clip
        clip_range: .2
        value_coef: 1
        life_mask: False

trainer:
    algorithm: *algo

    rnn_type: *rnn
    sample_size: *ss         # BPTT length
    store_state: True
    policy:
        optimizer:
            name: adam
            schedule_lr: False
            lr: 3e-4
            clip_norm: 10
            epsilon: 1.e-5
            weight_decay: 0
    value:
        optimizer:
            name: adam
            schedule_lr: False
            lr: 3e-4
            clip_norm: 10
            epsilon: 1.e-5
actor:
    algorithm: *algo

    rms:
        obs_names: [obs, global_state]
        normalize_obs: *irms
        normalize_reward: True
        obs_normalized_axis: [0, 1]
        reward_normalized_axis: [0, 1]
        update_reward_rms_in_time: True
        gamma: &gamma .99

buffer:
    type: ppo
    use_dataset: False

    # PPO configs
    adv_type: gae     # nae or gae
    gamma: *gamma
    lam: .95
    n_runners: *nrunners
    n_envs: *nenvs
    n_steps: *nsteps
    n_epochs: *nepochs
    n_mbs: *nmbs        # number of minibatches
    rnn_type: *rnn
    fragment_size: null  # must be multiple of sample_size if the latter is present
    sample_size: *ss
    norm_adv: batch

    # PPG configs
    n_pi: *npi
    n_segs: *nsegs
    n_aux_mbs_per_seg: *nambs
    n_aux_epochs: *naepochs

    # mini-batch size = n_runners * n_envs * epslen / n_mbs
    sample_keys:
        - obs
        - global_state
        - prev_reward
        - prev_action
        - action_mask
        - life_mask
        - action
        - value
        - traj_ret
        - advantage
        - logpi
        - mask
        - actor_h
        - actor_c
        - value_h
        - value_c
