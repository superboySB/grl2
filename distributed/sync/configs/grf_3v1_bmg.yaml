---
# NOTE: root_dir and model_name will be specified to all configs in run.train.py
algorithm: &algo sync-zero
name: zero
version: 0

precision: 32

n_agents: 1

# model path: root_dir/model_name/name
# tensorboard path: root_dir/model_name/logs
# the following names are just examples; they will be re-specified in the entry point
root_dir: *algo
model_name: *algo

controller:
    store_period: 1e5
    restart_runners_priod: null
    max_version_iterations: 1
    max_steps_per_iteration: 1e7
    initialize_rms: &irms False

parameter_server:
    root_dir: *algo
    model_name: *algo

    train_from_scratch_frac: 1
    online_frac: .2

    payoff:
        step_size: 1e-2     # step size towards the most recent data, 0 or null average payoff over the entire history
        update_interval: 180
        sampling_strategy:
            type: pfsp
            p: 1

    # rule_strategies:
    #     # agent name / config
    #     random:
    #         aid: 1
    #         vid: 1
    #         path: rule/random   # path to the file that defines Strategy
    #         # other configs

ray_config:
    runner:
        num_cpus: 1
    agent:
        num_gpus: 1

monitor: {}

runner:
    n_runners: &nrunners 30
    n_steps: &nsteps 16
    push_every_episode: False

env:
    env_name: &env_name grf-academy_3_vs_1_with_keeper
    representation: simple115v2
    rewards: scoring,checkpoints
    render: False
    write_full_episode_dumps: False
    write_video: False
    dump_frequency: 1000
    logdir: results/grf
    extra_players: null
    number_of_left_players_agent_controls: 3
    number_of_right_players_agent_controls: 0
    add_role_to_obs: False
    shared_ckpt_reward: False

    max_episode_steps: 3000
    use_action_mask: False
    uid2aid: null

    n_envs: &nenvs 1

    use_idx: False
    use_hidden: False
    use_event: False
    agentwise_global_state: False

agent: {}

strategy:
    algorithm: *algo
    train_loop: {}

model:
    aid: 0
    meta_type: &meta bmg
    rnn_type: &rnn null
    gamma: &gamma .99
    K: &K 0
    L: &L 0

    encoder: 
        nn_id: null
    rnn:
        nn_id: *rnn
        units: 256
        w_init: orthogonal
        use_ln: True
    policy:
        nn_id: policy
        units_list: [256, 256, 256]
        w_init: orthogonal
        activation: relu
        out_scale: .01
        index: null
        index_config:
            use_shared_bias: False
            use_bias: True
            w_init: orthogonal
    value:
        nn_id: value
        units_list: [256, 256, 256]
        w_init: orthogonal
        activation: relu
        index: null
        index_config:
            use_shared_bias: False
            use_bias: True
            w_init: orthogonal
    meta_params:
        nn_id: meta
        pg_coef:
            outer: 1
            default: 1
            init: null
            act: sigmoid
        entropy_coef:
            outer: 1e-3
            default: 1e-3
            scale: 5e-4
            bias: 5e-4
            init: null
            act: tanh
        value_coef:
            outer: .5
            default: .5
            scale: 1
            bias: 0
            init: null
            act: sigmoid
        gamma: 
            outer: *gamma
            default: *gamma
            scale: 1
            bias: 0
            init: null
            act: sigmoid
        lam:
            outer: &lam .95
            default: *lam
            scale: 1
            bias: 0
            init: null
            act: sigmoid

loss:
    # hyperparams for value target and advantage
    target_type: gae
    c_clip: 1
    rho_clip: 1
    adv_type: vtrace
    norm_adv: False

    # hyperparams for policy optimization
    pg_type: pg 
    ppo_clip_range: .2
    use_dice: True
    dice_axis: null
    dice_lam: 1
    kl: forward
    kl_coef: 1
    policy_sample_mask: True

    # hyperparams for value learning
    value_loss: mse
    value_clip_range: .2
    value_sample_mask: False
    stop_target_grads: False

    # hyperparams for meta-learning
    meta_type: *meta

trainer:
    algorithm: *algo
    aid: 0
    n_runners: *nrunners
    n_envs: *nenvs
    n_epochs: &nepochs 1
    n_mbs: &nmbs 1
    n_meta_epochs: 1
    n_steps: *nsteps         # BPTT length
    timeout_done: &td True

    meta_type: *meta
    K: *K
    L: *L
    store_state: True

    theta_opt:
        opt_name: rmsprop
        lr: 1e-3
        clip_norm: 10
        eps: 1e-5
        # eps_root: 1e-5
    meta_params_opt:
        opt_name: rmsprop
        lr: 1e-3
        clip_norm: .5
        eps: 1e-5
        weight_decay: null

actor:
    algorithm: *algo

    rms:
        obs_names: [obs, global_state]
        normalize_obs: *irms
        normalize_reward: False
        obs_normalized_axis: [0, 1]
        reward_normalized_axis: [0, 1]
        update_reward_rms_in_time: True
        gamma: *gamma

buffer:
    type: ac

    n_runners: *nrunners
    n_envs: *nenvs
    n_steps: *nsteps
    queue_size: 2
    K: *K
    L: *L
    timeout_done: *td
    rnn_type: *rnn

    # mini-batch size = n_runners * n_envs * epslen / n_mbs
    sample_keys:
        - obs
        - action
        - value
        - reward
        - discount
        - reset
        - mu_logprob
        - mu_logits
        - mask
        - h
        - c
